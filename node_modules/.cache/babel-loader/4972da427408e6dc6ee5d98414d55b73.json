{"ast":null,"code":"var _jsxFileName = \"/home/chris/Documents/Web_Dev_Workshop/Ski-California/liftie-resorts/src/components/Resort/Resort.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CircularProgress, Container } from '@mui/material';\nimport ResortDetail from '../ResortDetail/ResortDetail';\nimport NotFoundPage from '../NotFoundPage/NotFoundPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Resort(props) {\n  _s();\n\n  const [isDataLoaded, setIsDataLoaded] = React.useState(false);\n  const [isValidResortName, setIsValidResortName] = React.useState(false);\n  const {\n    resortQuery\n  } = useParams();\n  let skimapID = '';\n  let [resortData, setResortData] = React.useState({});\n  const corsProxy = 'https://mighty-scrubland-75189.herokuapp.com';\n  React.useEffect(() => {\n    //  error check for a valid resort query name first\n    // don't call fetch() on an invalid resortQuery\n    const validResort = props.resorts.find(resort => resort.query === resortQuery);\n\n    if (validResort === undefined) {\n      return;\n    }\n\n    skimapID = props.resorts.find(resort => resort.query === resortQuery).skimapID;\n    fetch(`${corsProxy}/https://liftie.info/api/resort/${resortQuery}`).then(response => response.json()).then(data => {\n      setResortData(data);\n      setIsValidResortName(true);\n      setTimeout(() => setIsDataLoaded(true), 1000);\n    }).catch(error => {\n      console.log(`Encountered error in Liftie Fetch request: ${error}`);\n    });\n  }, [resortQuery]); // only display the resort content AFTER the fetch call has returned!\n  // Otherwise, display the 404 page if invalid resort name was used.\n\n  let displayContent;\n\n  if (isValidResortName && !isDataLoaded) {\n    console.log('valid resort and data has not loaded yet');\n    displayContent = /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        margin: '4.8rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 24\n    }, this);\n  }\n\n  if (!isValidResortName) {\n    console.log('not valid resort');\n    displayContent = /*#__PURE__*/_jsxDEV(NotFoundPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 24\n    }, this);\n  }\n\n  if (isDataLoaded) {\n    console.log('data is loaded and valid resort');\n    displayContent = /*#__PURE__*/_jsxDEV(ResortDetail, {\n      resortData: resortData,\n      skimapID: skimapID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 24\n    }, this);\n  }\n\n  return displayContent;\n}\n\n_s(Resort, \"y8nw/g7uZB4oHACHfJXrR2Geowc=\", false, function () {\n  return [useParams];\n});\n\n_c = Resort;\n\nvar _c;\n\n$RefreshReg$(_c, \"Resort\");","map":{"version":3,"names":["React","useParams","CircularProgress","Container","ResortDetail","NotFoundPage","Resort","props","isDataLoaded","setIsDataLoaded","useState","isValidResortName","setIsValidResortName","resortQuery","skimapID","resortData","setResortData","corsProxy","useEffect","validResort","resorts","find","resort","query","undefined","fetch","then","response","json","data","setTimeout","catch","error","console","log","displayContent","display","justifyContent","alignItems","margin"],"sources":["/home/chris/Documents/Web_Dev_Workshop/Ski-California/liftie-resorts/src/components/Resort/Resort.jsx"],"sourcesContent":["import React from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport { CircularProgress, Container } from '@mui/material';\n\nimport ResortDetail from '../ResortDetail/ResortDetail';\nimport NotFoundPage from '../NotFoundPage/NotFoundPage';\n\nexport default function Resort(props) {\n   const [isDataLoaded, setIsDataLoaded] = React.useState(false);\n   const [isValidResortName, setIsValidResortName] = React.useState(false);\n   const { resortQuery } = useParams();\n   let skimapID = '';\n\n   let [resortData, setResortData] = React.useState({});\n   const corsProxy = 'https://mighty-scrubland-75189.herokuapp.com';\n\n   React.useEffect(() => {\n      //  error check for a valid resort query name first\n      // don't call fetch() on an invalid resortQuery\n      const validResort = props.resorts.find(resort => resort.query === resortQuery);\n      if (validResort === undefined) {\n         return;\n      }\n\n      skimapID = props.resorts.find(resort => resort.query === resortQuery).skimapID;\n      fetch(`${corsProxy}/https://liftie.info/api/resort/${resortQuery}`)\n         .then(response => response.json())\n         .then(data => {\n            setResortData(data);\n            setIsValidResortName(true);\n            setTimeout(() => setIsDataLoaded(true), 1000);\n         })\n         .catch((error) => {\n            console.log(`Encountered error in Liftie Fetch request: ${error}`)\n         });\n   }, [resortQuery])\n\n   // only display the resort content AFTER the fetch call has returned!\n   // Otherwise, display the 404 page if invalid resort name was used.\n   let displayContent;\n   if (isValidResortName && !isDataLoaded) {\n      console.log('valid resort and data has not loaded yet');\n      displayContent = <Container style={{\n         display: 'flex',\n         justifyContent: 'center',\n         alignItems: 'center',\n         margin: '4.8rem'\n      }}>\n         <CircularProgress color='inherit' />\n      </Container>\n   }\n   if (!isValidResortName) {\n      console.log('not valid resort');\n      displayContent = <NotFoundPage />;\n   }\n   if (isDataLoaded) {\n      console.log('data is loaded and valid resort');\n      displayContent = <ResortDetail resortData={resortData}\n         skimapID={skimapID}\n      />;\n   }\n\n   return (\n      displayContent\n   );\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,eAA5C;AAEA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;EAAA;;EACnC,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,KAAK,CAACU,QAAN,CAAe,KAAf,CAAxC;EACA,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CZ,KAAK,CAACU,QAAN,CAAe,KAAf,CAAlD;EACA,MAAM;IAAEG;EAAF,IAAkBZ,SAAS,EAAjC;EACA,IAAIa,QAAQ,GAAG,EAAf;EAEA,IAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BhB,KAAK,CAACU,QAAN,CAAe,EAAf,CAAlC;EACA,MAAMO,SAAS,GAAG,8CAAlB;EAEAjB,KAAK,CAACkB,SAAN,CAAgB,MAAM;IACnB;IACA;IACA,MAAMC,WAAW,GAAGZ,KAAK,CAACa,OAAN,CAAcC,IAAd,CAAmBC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBV,WAA9C,CAApB;;IACA,IAAIM,WAAW,KAAKK,SAApB,EAA+B;MAC5B;IACF;;IAEDV,QAAQ,GAAGP,KAAK,CAACa,OAAN,CAAcC,IAAd,CAAmBC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBV,WAA9C,EAA2DC,QAAtE;IACAW,KAAK,CAAE,GAAER,SAAU,mCAAkCJ,WAAY,EAA5D,CAAL,CACIa,IADJ,CACSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADrB,EAEIF,IAFJ,CAESG,IAAI,IAAI;MACXb,aAAa,CAACa,IAAD,CAAb;MACAjB,oBAAoB,CAAC,IAAD,CAApB;MACAkB,UAAU,CAAC,MAAMrB,eAAe,CAAC,IAAD,CAAtB,EAA8B,IAA9B,CAAV;IACF,CANJ,EAOIsB,KAPJ,CAOWC,KAAD,IAAW;MACfC,OAAO,CAACC,GAAR,CAAa,8CAA6CF,KAAM,EAAhE;IACF,CATJ;EAUF,CAnBD,EAmBG,CAACnB,WAAD,CAnBH,EATmC,CA8BnC;EACA;;EACA,IAAIsB,cAAJ;;EACA,IAAIxB,iBAAiB,IAAI,CAACH,YAA1B,EAAwC;IACrCyB,OAAO,CAACC,GAAR,CAAY,0CAAZ;IACAC,cAAc,gBAAG,QAAC,SAAD;MAAW,KAAK,EAAE;QAChCC,OAAO,EAAE,MADuB;QAEhCC,cAAc,EAAE,QAFgB;QAGhCC,UAAU,EAAE,QAHoB;QAIhCC,MAAM,EAAE;MAJwB,CAAlB;MAAA,uBAMd,QAAC,gBAAD;QAAkB,KAAK,EAAC;MAAxB;QAAA;QAAA;QAAA;MAAA;IANc;MAAA;MAAA;MAAA;IAAA,QAAjB;EAQF;;EACD,IAAI,CAAC5B,iBAAL,EAAwB;IACrBsB,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACAC,cAAc,gBAAG,QAAC,YAAD;MAAA;MAAA;MAAA;IAAA,QAAjB;EACF;;EACD,IAAI3B,YAAJ,EAAkB;IACfyB,OAAO,CAACC,GAAR,CAAY,iCAAZ;IACAC,cAAc,gBAAG,QAAC,YAAD;MAAc,UAAU,EAAEpB,UAA1B;MACd,QAAQ,EAAED;IADI;MAAA;MAAA;MAAA;IAAA,QAAjB;EAGF;;EAED,OACGqB,cADH;AAGF;;GA1DuB7B,M;UAGGL,S;;;KAHHK,M"},"metadata":{},"sourceType":"module"}