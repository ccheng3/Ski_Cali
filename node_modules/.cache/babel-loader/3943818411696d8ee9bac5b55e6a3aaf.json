{"ast":null,"code":"var _jsxFileName = \"/home/chris/Documents/Web_Dev_Workshop/Ski-California/liftie-resorts/src/components/TweetPanel/TweetPanel.jsx\";\nimport React from 'react';\nimport Tweet from '../Tweet/Tweet';\nimport { Container } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TweetPanel(props) {\n  const tweets = props.resort.twitter.tweets.map(tweet => {\n    const tweetDateStringArray = tweet.created_at.split(' '); // parse logic for Tweet published hour\n\n    let tweetDateFormatTime = tweetDateStringArray[3].slice(0, 5);\n    const tweetDateHour = parseInt(tweetDateFormatTime.slice(0, 2));\n    tweetDateFormatTime = tweetDateHour > 12 ? (tweetDateHour - 12).toString() + tweetDateFormatTime.slice(2) + ' PM' : tweetDateHour + ' AM';\n    const tweetDateClean = `${tweetDateStringArray[0]} ${tweetDateFormatTime} - ${tweetDateStringArray[1]} ${tweetDateStringArray[2]}, ${tweetDateStringArray[5]}`; // grab and render the tweet's image if present, otherwise render nothing.\n\n    const tweetMediaObject = tweet.entities.media;\n    const tweetMediaFile = tweetMediaObject === undefined ? null : /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: '1.2rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        width: \"350px\",\n        height: \"auto\",\n        src: tweetMediaObject[0].media_url_https\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 10\n    }, this);\n    console.log(tweetMediaFile);\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweetDateClean: tweetDateClean,\n      tweetMediaFile: tweetMediaFile,\n      resort: props.resort,\n      style: {\n        marginBottom: '4.8rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }, this);\n  });\n  return tweets;\n}\n_c = TweetPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetPanel\");","map":{"version":3,"names":["React","Tweet","Container","TweetPanel","props","tweets","resort","twitter","map","tweet","tweetDateStringArray","created_at","split","tweetDateFormatTime","slice","tweetDateHour","parseInt","toString","tweetDateClean","tweetMediaObject","entities","media","tweetMediaFile","undefined","display","justifyContent","alignItems","marginTop","media_url_https","console","log","marginBottom"],"sources":["/home/chris/Documents/Web_Dev_Workshop/Ski-California/liftie-resorts/src/components/TweetPanel/TweetPanel.jsx"],"sourcesContent":["import React from 'react';\n\nimport Tweet from '../Tweet/Tweet';\nimport { Container } from '@mui/material';\n\nexport default function TweetPanel(props) {\n   const tweets = props.resort.twitter.tweets.map(tweet => {\n      const tweetDateStringArray = tweet.created_at.split(' ');\n\n      // parse logic for Tweet published hour\n      let tweetDateFormatTime = tweetDateStringArray[3].slice(0, 5);\n      const tweetDateHour = parseInt(tweetDateFormatTime.slice(0, 2));\n      tweetDateFormatTime = tweetDateHour > 12 ?\n         (tweetDateHour - 12).toString() + tweetDateFormatTime.slice(2) + ' PM' :\n         tweetDateHour + ' AM';\n      const tweetDateClean = `${tweetDateStringArray[0]} ${tweetDateFormatTime} - ${tweetDateStringArray[1]} ${tweetDateStringArray[2]}, ${tweetDateStringArray[5]}`;\n\n      // grab and render the tweet's image if present, otherwise render nothing.\n      const tweetMediaObject = tweet.entities.media;\n      const tweetMediaFile = tweetMediaObject === undefined ? null :\n         <Container style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: '1.2rem',\n         }}>\n            <img width='350px' height='auto' src={tweetMediaObject[0].media_url_https} />\n         </Container>\n      console.log(tweetMediaFile);\n\n      return (\n         <Tweet tweetDateClean={tweetDateClean}\n            tweetMediaFile={tweetMediaFile}\n            resort={props.resort}\n            style={{ marginBottom: '4.8rem' }}\n         />\n      );\n   })\n\n   return tweets;\n}"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,SAAT,QAA0B,eAA1B;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;EACvC,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBF,MAArB,CAA4BG,GAA5B,CAAgCC,KAAK,IAAI;IACrD,MAAMC,oBAAoB,GAAGD,KAAK,CAACE,UAAN,CAAiBC,KAAjB,CAAuB,GAAvB,CAA7B,CADqD,CAGrD;;IACA,IAAIC,mBAAmB,GAAGH,oBAAoB,CAAC,CAAD,CAApB,CAAwBI,KAAxB,CAA8B,CAA9B,EAAiC,CAAjC,CAA1B;IACA,MAAMC,aAAa,GAAGC,QAAQ,CAACH,mBAAmB,CAACC,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAA9B;IACAD,mBAAmB,GAAGE,aAAa,GAAG,EAAhB,GACnB,CAACA,aAAa,GAAG,EAAjB,EAAqBE,QAArB,KAAkCJ,mBAAmB,CAACC,KAApB,CAA0B,CAA1B,CAAlC,GAAiE,KAD9C,GAEnBC,aAAa,GAAG,KAFnB;IAGA,MAAMG,cAAc,GAAI,GAAER,oBAAoB,CAAC,CAAD,CAAI,IAAGG,mBAAoB,MAAKH,oBAAoB,CAAC,CAAD,CAAI,IAAGA,oBAAoB,CAAC,CAAD,CAAI,KAAIA,oBAAoB,CAAC,CAAD,CAAI,EAA7J,CATqD,CAWrD;;IACA,MAAMS,gBAAgB,GAAGV,KAAK,CAACW,QAAN,CAAeC,KAAxC;IACA,MAAMC,cAAc,GAAGH,gBAAgB,KAAKI,SAArB,GAAiC,IAAjC,gBACpB,QAAC,SAAD;MAAW,KAAK,EAAE;QACfC,OAAO,EAAE,MADM;QAEfC,cAAc,EAAE,QAFD;QAGfC,UAAU,EAAE,QAHG;QAIfC,SAAS,EAAE;MAJI,CAAlB;MAAA,uBAMG;QAAK,KAAK,EAAC,OAAX;QAAmB,MAAM,EAAC,MAA1B;QAAiC,GAAG,EAAER,gBAAgB,CAAC,CAAD,CAAhB,CAAoBS;MAA1D;QAAA;QAAA;QAAA;MAAA;IANH;MAAA;MAAA;MAAA;IAAA,QADH;IASAC,OAAO,CAACC,GAAR,CAAYR,cAAZ;IAEA,oBACG,QAAC,KAAD;MAAO,cAAc,EAAEJ,cAAvB;MACG,cAAc,EAAEI,cADnB;MAEG,MAAM,EAAElB,KAAK,CAACE,MAFjB;MAGG,KAAK,EAAE;QAAEyB,YAAY,EAAE;MAAhB;IAHV;MAAA;MAAA;MAAA;IAAA,QADH;EAOF,CA/Bc,CAAf;EAiCA,OAAO1B,MAAP;AACF;KAnCuBF,U"},"metadata":{},"sourceType":"module"}